/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';

import {
  EventEmitter,
} from '@stencil/core';

declare global {

  namespace StencilComponents {
    interface LazyImg {
      'alt': string;
      'src': string;
    }
  }

  interface HTMLLazyImgElement extends StencilComponents.LazyImg, HTMLStencilElement {}

  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-img': JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'onLazyImgloaded'?: (event: CustomEvent<HTMLImageElement>) => void;
      'src'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyCv {

    }
  }

  interface HTMLMyCvElement extends StencilComponents.MyCv, HTMLStencilElement {}

  var HTMLMyCvElement: {
    prototype: HTMLMyCvElement;
    new (): HTMLMyCvElement;
  };
  interface HTMLElementTagNameMap {
    'my-cv': HTMLMyCvElement;
  }
  interface ElementTagNameMap {
    'my-cv': HTMLMyCvElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-cv': JSXElements.MyCvAttributes;
    }
  }
  namespace JSXElements {
    export interface MyCvAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyExperience {

    }
  }

  interface HTMLMyExperienceElement extends StencilComponents.MyExperience, HTMLStencilElement {}

  var HTMLMyExperienceElement: {
    prototype: HTMLMyExperienceElement;
    new (): HTMLMyExperienceElement;
  };
  interface HTMLElementTagNameMap {
    'my-experience': HTMLMyExperienceElement;
  }
  interface ElementTagNameMap {
    'my-experience': HTMLMyExperienceElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-experience': JSXElements.MyExperienceAttributes;
    }
  }
  namespace JSXElements {
    export interface MyExperienceAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyHobbies {

    }
  }

  interface HTMLMyHobbiesElement extends StencilComponents.MyHobbies, HTMLStencilElement {}

  var HTMLMyHobbiesElement: {
    prototype: HTMLMyHobbiesElement;
    new (): HTMLMyHobbiesElement;
  };
  interface HTMLElementTagNameMap {
    'my-hobbies': HTMLMyHobbiesElement;
  }
  interface ElementTagNameMap {
    'my-hobbies': HTMLMyHobbiesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-hobbies': JSXElements.MyHobbiesAttributes;
    }
  }
  namespace JSXElements {
    export interface MyHobbiesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SingleHobby {
      'alt': string;
      'path': string;
    }
  }

  interface HTMLSingleHobbyElement extends StencilComponents.SingleHobby, HTMLStencilElement {}

  var HTMLSingleHobbyElement: {
    prototype: HTMLSingleHobbyElement;
    new (): HTMLSingleHobbyElement;
  };
  interface HTMLElementTagNameMap {
    'single-hobby': HTMLSingleHobbyElement;
  }
  interface ElementTagNameMap {
    'single-hobby': HTMLSingleHobbyElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'single-hobby': JSXElements.SingleHobbyAttributes;
    }
  }
  namespace JSXElements {
    export interface SingleHobbyAttributes extends HTMLAttributes {
      'alt'?: string;
      'path'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyInfo {

    }
  }

  interface HTMLMyInfoElement extends StencilComponents.MyInfo, HTMLStencilElement {}

  var HTMLMyInfoElement: {
    prototype: HTMLMyInfoElement;
    new (): HTMLMyInfoElement;
  };
  interface HTMLElementTagNameMap {
    'my-info': HTMLMyInfoElement;
  }
  interface ElementTagNameMap {
    'my-info': HTMLMyInfoElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-info': JSXElements.MyInfoAttributes;
    }
  }
  namespace JSXElements {
    export interface MyInfoAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyProjects {

    }
  }

  interface HTMLMyProjectsElement extends StencilComponents.MyProjects, HTMLStencilElement {}

  var HTMLMyProjectsElement: {
    prototype: HTMLMyProjectsElement;
    new (): HTMLMyProjectsElement;
  };
  interface HTMLElementTagNameMap {
    'my-projects': HTMLMyProjectsElement;
  }
  interface ElementTagNameMap {
    'my-projects': HTMLMyProjectsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-projects': JSXElements.MyProjectsAttributes;
    }
  }
  namespace JSXElements {
    export interface MyProjectsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SingleProject {
      'project': any;
    }
  }

  interface HTMLSingleProjectElement extends StencilComponents.SingleProject, HTMLStencilElement {}

  var HTMLSingleProjectElement: {
    prototype: HTMLSingleProjectElement;
    new (): HTMLSingleProjectElement;
  };
  interface HTMLElementTagNameMap {
    'single-project': HTMLSingleProjectElement;
  }
  interface ElementTagNameMap {
    'single-project': HTMLSingleProjectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'single-project': JSXElements.SingleProjectAttributes;
    }
  }
  namespace JSXElements {
    export interface SingleProjectAttributes extends HTMLAttributes {
      'project'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface TechChip {
      'tag': string;
    }
  }

  interface HTMLTechChipElement extends StencilComponents.TechChip, HTMLStencilElement {}

  var HTMLTechChipElement: {
    prototype: HTMLTechChipElement;
    new (): HTMLTechChipElement;
  };
  interface HTMLElementTagNameMap {
    'tech-chip': HTMLTechChipElement;
  }
  interface ElementTagNameMap {
    'tech-chip': HTMLTechChipElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tech-chip': JSXElements.TechChipAttributes;
    }
  }
  namespace JSXElements {
    export interface TechChipAttributes extends HTMLAttributes {
      'tag'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface WebFooter {

    }
  }

  interface HTMLWebFooterElement extends StencilComponents.WebFooter, HTMLStencilElement {}

  var HTMLWebFooterElement: {
    prototype: HTMLWebFooterElement;
    new (): HTMLWebFooterElement;
  };
  interface HTMLElementTagNameMap {
    'web-footer': HTMLWebFooterElement;
  }
  interface ElementTagNameMap {
    'web-footer': HTMLWebFooterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'web-footer': JSXElements.WebFooterAttributes;
    }
  }
  namespace JSXElements {
    export interface WebFooterAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface WebHeader {

    }
  }

  interface HTMLWebHeaderElement extends StencilComponents.WebHeader, HTMLStencilElement {}

  var HTMLWebHeaderElement: {
    prototype: HTMLWebHeaderElement;
    new (): HTMLWebHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'web-header': HTMLWebHeaderElement;
  }
  interface ElementTagNameMap {
    'web-header': HTMLWebHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'web-header': JSXElements.WebHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface WebHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface WebSite {

    }
  }

  interface HTMLWebSiteElement extends StencilComponents.WebSite, HTMLStencilElement {}

  var HTMLWebSiteElement: {
    prototype: HTMLWebSiteElement;
    new (): HTMLWebSiteElement;
  };
  interface HTMLElementTagNameMap {
    'web-site': HTMLWebSiteElement;
  }
  interface ElementTagNameMap {
    'web-site': HTMLWebSiteElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'web-site': JSXElements.WebSiteAttributes;
    }
  }
  namespace JSXElements {
    export interface WebSiteAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
